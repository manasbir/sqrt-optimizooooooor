//my implementation lel
#define function sqrt(uint256) public pure returns (uint256)

#define macro SQRT() = takes (1) returns (1) {
    // input stack          // [num]
    // if num == 0 return 0
    dup1                    // [number, number]
    iszero                  // [is_zero, number]
    is_zero jumpi 

    // assign stack vars
    dup1                    // [x, num]
    0x01                    // [result, x, num]

    // if (x >> 128 > 0) {
    //     x >>= 128;
    //     result <<= 64;
    // }
    dup2                    // [x, result, x, num]
    0x80 shr                // [x >> 128, result, x, num]
    dup1                    // [x >> 128, x >> 128, result, x, num]
    iszero                  // [x >> 128 == 0, x >> 128, result, x, num]
    sh_128_0 jumpi          
    swap1 0x40 shl          // [result, x >> 128, x, num]
    swap1 swap2             // [x, result, x >> 128, num]
    sh_128_0:
    pop

    // if (x >> 64 > 0) {
    //     x >>= 64;
    //     result <<= 32;
    // }
    dup2                    // [x, result, x, num]
    0x40 shr                // [x >> 64, result, x, num]
    dup1                    // [x >> 64, x >> 64, result, x, num]
    iszero                  // [x >> 64 == 0, x >> 64, result, x, num]
    sh_64_0 jumpi          
    swap1 0x20 shl          // [result, x >> 64, x, num]
    swap1 swap2             // [x, result, x >> 64, num]
    sh_64_0:
    pop

    // if (x >> 32 > 0) {
    //     x >>= 32;
    //     result <<= 16;
    // }
    dup2                    // [x, result, x, num]
    0x20 shr                // [x >> 32, result, x, num]
    dup1                    // [x >> 32, x >> 32, result, x, num]
    iszero                  // [x >> 32 == 0, x >> 32, result, x, num]
    sh_32_0 jumpi          
    swap1 0x10 shl          // [result, x >> 32, x, num]
    swap1 swap2             // [x, result, x >> 32, num]
    sh_32_0:
    pop

    // if (x >> 16 > 0) {
    //     x >>= 16;
    //     result <<= 8;
    // }
    dup2                    // [x, result, x, num]
    0x10 shr                // [x >> 16, result, x, num]
    dup1                    // [x >> 16, x >> 16, result, x, num]
    iszero                  // [x >> 16 == 0, x >> 16, result, x, num]
    sh_16_0 jumpi          
    swap1 0x08 shl          // [result, x >> 16, x, num]
    swap1 swap2             // [x, result, x >> 16, num]
    sh_16_0:
    pop

    // if (x >> 8 > 0) {
    //     x >>= 8;
    //     result <<= 4;
    // }
    dup2                    // [x, result, x, num]
    0x08 shr                // [x >> 8, result, x, num]
    dup1                    // [x >> 8, x >> 8, result, x, num]
    iszero                  // [x >> 8 == 0, x >> 8, result, x, num]
    sh_8_0 jumpi          
    swap1 0x04 shl          // [result, x >> 8, x, num]
    swap1 swap2             // [x, result, x >> 8, num]
    sh_8_0:
    pop

    // if (x >> 4 > 0) {
    //     x >>= 4;
    //     result <<= 2;
    // }
    dup2                    // [x, result, x, num]
    0x04 shr                // [x >> 4, result, x, num]
    dup1                    // [x >> 4, x >> 4, result, x, num]
    iszero                  // [x >> 4 == 0, x >> 4, result, x, num]
    sh_4_0 jumpi          
    swap1 0x02 shl          // [result, x >> 4, x, num]
    swap1 swap2             // [x, result, x >> 4, num]
    sh_4_0:
    pop

    // if (x >> 2 > 0) {
    //     x >>= 2;
    //     result <<= 1;
    // }
    dup2                    // [x, result, x, num]
    0x02 shr                // [x >> 2, result, x, num]
    dup1                    // [x >> 2, x >> 2, result, x, num]
    iszero                  // [x >> 2 == 0, x >> 2, result, x, num]
    sh_2_0 jumpi          
    swap1 0x01 shl          // [result, x >> 2, x, num]
    swap1 swap2             // [x, result, x >> 2, num]
    sh_2_0:
    pop

    // result = (result + num / result) >> 1;
    dup1                    // [result, result, x, num]
    dup4                    // [num, result, result, x, num]
    div                     // [num / result, result x, num]
    add                     // [result + num / result, x, num]
    0x01 shr                // [result, x, num]

    // result = (result + num / result) >> 1;
    dup1                    // [result, result, x, num]
    dup4                    // [num, result, result, x, num]
    div                     // [num / result, result, x, num]
    add                     // [result + num / result, x, num]
    0x01 shr                // [result, x, num]

    // result = (result + num / result) >> 1;
    dup1                    // [result, result, x, num]
    dup4                    // [num, result, result, x, num]
    div                     // [num / result, result, x, num]
    add                     // [result + num / result, x, num]
    0x01 shr                // [result, x, num]

    // result = (result + num / result) >> 1;
    dup1                    // [result, result, x, num]
    dup4                    // [num, result, result, x, num]
    div                     // [num / result, result, x, num]
    add                     // [result + num / result, x, num]
    0x01 shr                // [result, x, num]

    // result = (result + num / result) >> 1;
    dup1                    // [result, result, x, num]
    dup4                    // [num, result, result, x, num]
    div                     // [num / result, result, x, num]
    add                     // [result + num / result, x, num]
    0x01 shr                // [result, x, num]

    // result = (result + num / result) >> 1;
    dup1                    // [result, result, x, num]
    dup4                    // [num, result, result, x, num]
    div                     // [num / result, result, x, num]
    add                     // [result + num / result, x, num]
    0x01 shr                // [result, x, num]

    // result = (result + num / result) >> 1;
    dup1                    // [result, result, x, num]
    dup4                    // [num, result, result, x, num]
    div                     // [num / result, result, x, num]
    add                     // [result + num / result, x, num]
    0x01 shr                // [result, x, num]

    // result = min(result, num / result)
    dup1                    // [result, result, x, num]
    swap3                   // [num, result, x, result]
    div                     // [num / result, x, result]
    swap2 swap1 pop         // [result, num / result]
    MIN()

    is_zero:
}
